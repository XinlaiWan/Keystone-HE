diff --git a/CMakeLists.txt b/CMakeLists.txt
index 7667392..eab78be 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -34,7 +34,7 @@ else()
   set(ABI lp64d)
 endif()
 
-set(ISA rv${BITS}imafdc)
+set(ISA rv${BITS}imafdc_hghi)
 set(confdir ${CMAKE_SOURCE_DIR}/overlays/keystone/configs)
 set(patchdir ${CMAKE_SOURCE_DIR}/overlays/keystone/patches)
 set(cross_compile riscv${BITS}-buildroot-linux-gnu-)
diff --git a/mkutils/plat/generic/run.mk b/mkutils/plat/generic/run.mk
index 32f1523..ac5dc58 100644
--- a/mkutils/plat/generic/run.mk
+++ b/mkutils/plat/generic/run.mk
@@ -6,23 +6,40 @@ QEMU_PORT       ?= 9821
 QEMU_DBG_PORT   ?= $(shell echo $$(( $(QEMU_PORT) + 1)) )
 QEMU_DEBUG      := -gdb tcp::$(QEMU_DBG_PORT) -S
 
-QEMU_MEM        ?= 2G
+QEMU_MEM        ?= 6G
 QEMU_SMP        ?= 4
 
+export XVISOR   ?= $(KEYSTONE)/../xvisor
 
 QEMU_FLAGS := -m $(QEMU_MEM) -smp $(QEMU_SMP) -nographic \
                 -machine virt,rom=$(BUILDROOT_BUILDDIR)/images/bootrom.bin \
                 -bios $(BUILDROOT_BUILDDIR)/images/fw_jump.elf \
-                -kernel $(BUILDROOT_BUILDDIR)/images/Image \
+                -kernel $(XVISOR)/build/vmm.bin \
+                -initrd $(XVISOR)/build/disk.img \
+                -append 'vmm.bootcmd="vfs mount initrd /;vfs run /boot.xscript;vfs cat /system/banner.txt"' \
                 -drive file=$(BUILDROOT_BUILDDIR)/images/rootfs.ext2,format=raw,id=hd0 \
                 -device virtio-blk-device,drive=hd0 \
-                -append "console=ttyS0 ro root=/dev/vda" \
+                -netdev user,id=net0,net=192.168.100.1/24,dhcpstart=192.168.100.128,hostfwd=tcp::9821-:22 \
+                -device virtio-net-device,netdev=net0 \
+                -device virtio-rng-pci \
+
+QEMU_FLAGS_TWO_GUESTS := -m $(QEMU_MEM) -smp $(QEMU_SMP) -nographic \
+                -machine virt,rom=$(BUILDROOT_BUILDDIR)/images/bootrom.bin \
+                -bios $(BUILDROOT_BUILDDIR)/images/fw_jump.elf \
+                -kernel $(XVISOR)/build/vmm.bin \
+                -initrd $(XVISOR)/build/disk.img \
+                -append 'vmm.bootcmd="vfs mount initrd /;vfs run /boot.xscript;vfs cat /system/banner.txt"' \
+                -drive file=$(BUILDROOT_BUILDDIR)/images/rootfs.ext2,format=raw,id=hd0 \
+                -device virtio-blk-device,drive=hd0 \
+                -drive file=$(BUILDROOT_BUILDDIR)/images/rootfs_copy.ext2,format=raw,id=hd1 \
+                -device virtio-blk-device,drive=hd1 \
                 -netdev user,id=net0,net=192.168.100.1/24,dhcpstart=192.168.100.128,hostfwd=tcp::9821-:22 \
                 -device virtio-net-device,netdev=net0 \
                 -device virtio-rng-pci \
 
 ifneq ($(KEYSTONE_DEBUG),)
         QEMU_FLAGS += $(QEMU_DEBUG)
+        QEMU_FLAGS_TWO_GUESTS += $(QEMU_DEBUG)
 endif
 
 run:
diff --git a/overlays/keystone/configs/linux64-defconfig b/overlays/keystone/configs/linux64-defconfig
index f6e0086..d51fdcb 100644
--- a/overlays/keystone/configs/linux64-defconfig
+++ b/overlays/keystone/configs/linux64-defconfig
@@ -125,3 +125,8 @@ CONFIG_DEBUG_PLIST=y
 CONFIG_DEBUG_SG=y
 # CONFIG_RCU_TRACE is not set
 CONFIG_RCU_EQS_DEBUG=y
+CONFIG_GDB_SCRIPTS=y
+CONFIG_DEBUG_INFO_DWARF4=y
+CONFIG_DEBUG_KERNEL=y
+CONFIG_DEBUG_DRIVER=y
+CONFIG_FRAME_POINTER=y
diff --git a/overlays/keystone/configs/qemu_riscv64_virt_defconfig b/overlays/keystone/configs/qemu_riscv64_virt_defconfig
index 1d348ab..42b097e 100644
--- a/overlays/keystone/configs/qemu_riscv64_virt_defconfig
+++ b/overlays/keystone/configs/qemu_riscv64_virt_defconfig
@@ -30,3 +30,4 @@ BR2_PACKAGE_KEYSTONE_DRIVER=y
 BR2_PACKAGE_HOST_KEYSTONE_SDK=y
 BR2_PACKAGE_KEYSTONE_RUNTIME=y
 BR2_PACKAGE_KEYSTONE_EXAMPLES=y
+BR2_STRIP_strip=n
diff --git a/sm/src/enclave.c b/sm/src/enclave.c
index dba749d..0fff49f 100644
--- a/sm/src/enclave.c
+++ b/sm/src/enclave.c
@@ -45,6 +45,7 @@ static inline void context_switch_to_enclave(struct sbi_trap_regs* regs,
   swap_prev_state(&enclaves[eid].threads[0], regs, 1);
   swap_prev_mepc(&enclaves[eid].threads[0], regs, regs->mepc);
   swap_prev_mstatus(&enclaves[eid].threads[0], regs, regs->mstatus);
+  swap_prev_hstatus(&enclaves[eid].threads[0]);
 
   uintptr_t interrupts = 0;
   csr_write(mideleg, interrupts);
@@ -53,6 +54,9 @@ static inline void context_switch_to_enclave(struct sbi_trap_regs* regs,
     // passing parameters for a first run
     regs->mepc = (uintptr_t) enclaves[eid].pa_params.dram_base - 4; // regs->mepc will be +4 before sbi_ecall_handler return
     regs->mstatus = (1 << MSTATUS_MPP_SHIFT);
+    // #if __riscv_xlen == 64
+    // regs->mstatus |= MSTATUS_MPV;
+    // #endif
     // $a1: (PA) DRAM base,
     regs->a1 = (uintptr_t) enclaves[eid].pa_params.dram_base;
     // $a2: (PA) DRAM size,
@@ -108,6 +112,7 @@ static inline void context_switch_to_host(struct sbi_trap_regs *regs,
   swap_prev_state(&enclaves[eid].threads[0], regs, return_on_resume);
   swap_prev_mepc(&enclaves[eid].threads[0], regs, regs->mepc);
   swap_prev_mstatus(&enclaves[eid].threads[0], regs, regs->mstatus);
+  swap_prev_hstatus(&enclaves[eid].threads[0]);
 
   switch_vector_host();
 
diff --git a/sm/src/thread.c b/sm/src/thread.c
index 2df9477..cd1af8c 100644
--- a/sm/src/thread.c
+++ b/sm/src/thread.c
@@ -21,12 +21,23 @@ void swap_prev_mstatus(struct thread_state* thread, struct sbi_trap_regs* regs,
   uintptr_t mstatus_mask = MSTATUS_SIE | MSTATUS_SPIE | MSTATUS_SPP |
                             MSTATUS_MPP | MSTATUS_FS | MSTATUS_SUM |
                             MSTATUS_MXR;
+  // #if __riscv_xlen == 64
+  // mstatus_mask |= MSTATUS_MPV;
+  // #endif
 
   uintptr_t tmp = thread->prev_mstatus;
   thread->prev_mstatus = (current_mstatus & ~mstatus_mask) | (current_mstatus & mstatus_mask);
   regs->mstatus = (current_mstatus & ~mstatus_mask) | tmp;
 }
 
+void swap_prev_hstatus(struct thread_state* thread) {
+  uintptr_t hstatus_mask = HSTATUS_SPV | HSTATUS_SPVP;
+  uintptr_t tmp = thread->prev_hstatus;
+  uintptr_t current_hstatus = csr_read(hstatus);
+  thread->prev_hstatus = current_hstatus;
+  csr_write(hstatus, (current_hstatus & ~hstatus_mask) | tmp);
+}
+
 /* Swaps the entire s-mode visible state, general registers and then csrs */
 void swap_prev_state(struct thread_state* thread, struct sbi_trap_regs* regs, int return_on_resume)
 {
@@ -95,6 +106,7 @@ void clean_state(struct thread_state* state){
     prev[i] = 0;
   }
 
+  // state->prev_mstatus = 0x8000000000;
   state->prev_mpp = -1; // 0x800;
   clean_smode_csrs(state);
 }
diff --git a/sm/src/thread.h b/sm/src/thread.h
index ba6ea5a..39290f2 100644
--- a/sm/src/thread.h
+++ b/sm/src/thread.h
@@ -71,6 +71,7 @@ struct thread_state
   int prev_mpp;
   uintptr_t prev_mepc;
   uintptr_t prev_mstatus;
+  uintptr_t prev_hstatus;
   struct csrs prev_csrs;
   struct ctx prev_state;
 };
@@ -79,6 +80,7 @@ struct thread_state
 void swap_prev_state(struct thread_state* state, struct sbi_trap_regs* regs, int return_on_resume);
 void swap_prev_mepc(struct thread_state* state, struct sbi_trap_regs* regs, uintptr_t mepc);
 void swap_prev_mstatus(struct thread_state* state, struct sbi_trap_regs* regs, uintptr_t mstatus);
+void swap_prev_hstatus(struct thread_state* state);
 void swap_prev_smode_csrs(struct thread_state* thread);
 
 void switch_vector_enclave();
